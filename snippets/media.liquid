{%- comment -%}
----------------------------------------------------------------------------------------------------------------------
MEDIA COMPONENT
----------------------------------------------------------------------------------------------------------------------

Renders a single media. This snippet can be used for product media, but also for media coming from metafields.

********************************************
Supported variables
********************************************

* media: the media to render (required)
* sizes: an optional sizes attribute used for the image generation
* preload: if set to true, the image is preloaded and its fetch priority is higher
* autoplay: a boolean indicating if media of type video should autoplay. If set to false, a "play button" will be displayed on top of video
* loop: a boolean indicating if media type of type video should loop
* playsinline: controls if the video should be played inline. If none is passed, it will be set to true if the video is autoplaying
* muted: controls if the video sould be muted. If none is passed, it will be set to true if the video is autoplaying
* controls: if set to true, then the controls for the video are displayed
* group: an optional group to set for the media. When a group is set, only one media at a time of the given group can play.
* show_play_button: by default, a play button is added when video is not autoplaying. By setting it to false you can force turning off this behavior.
* play_button_background: an optional background color for the play button
* class: optional class applied on the item
{%- endcomment -%}

{%- liquid
  if preload
    assign loading = 'eager'
    assign fetchpriority = 'high'
  else
    assign loading = 'lazy'
    assign fetchpriority = 'auto'
  endif
-%}

{%- case media.media_type -%}

  {%- when 'image' -%}
    {{- media | image_url: width: media.preview_image.width
      | image_tag: loading: loading, fetchpriority: fetchpriority, sizes: sizes,
      widths: '200,300,400,500,600,700,800,1000,1200,1400,1600,1800,2000', class: class -}}

  {%- when 'video', 'external_video' -%}

    {%- assign preview_img = media.preview_image | image_url: width: 1600 -%}

    {%- comment -%}
      Mobile: render only an optimized poster image (no video or heavy iframe)
      Desktop: render a video element (native file) with poster OR a poster+play placeholder for external providers
    {%- endcomment -%}

    {% if request.device_type == 'mobile' %}
      {{- preview_img
        | image_tag: loading: 'eager', fetchpriority: 'high', decoding: 'async', sizes: sizes, class: class -}}
    {% else %}

      {%- if media.media_type == 'video' -%}
        <div class="hero-media {{ class }}" style="aspect-ratio: {{ media.aspect_ratio }}; position:relative; overflow:hidden;">
          <!-- Native video with poster so poster is LCP-friendly -->
          <video
            data-hero-video
            poster="{{ preview_img }}"
            preload="none"
            playsinline
            muted
            loop
            autoplay
            playsinline
            style="width:100%; height:auto; display:block;"
            controlslist="nodownload">
            <source src="{{ media | file_url }}" type="video/mp4">
            <!-- Fallback if the browser doesn't support video -->
            {{ preview_img | image_tag: loading: 'eager', fetchpriority: 'high', decoding: 'async', sizes: sizes }}
          </video>
        </div>

      {%- else -%} {# external_video (YouTube/Vimeo) #}
        <div class="hero-media {{ class }}" style="aspect-ratio: {{ media.aspect_ratio }}; position:relative; overflow:hidden;">
          <!-- Poster + play button. We'll lazy-insert the external iframe on click -->
          <button class="hero-external-placeholder" aria-label="Play video" style="all:unset;cursor:pointer;display:block;width:100%;">
            {{ preview_img | image_tag: loading: 'eager', fetchpriority: 'high', decoding: 'async', sizes: sizes }}
            <div class="hero-play-overlay" aria-hidden="true" style="position:absolute; inset:0; display:flex; align-items:center; justify-content:center; pointer-events:none;">
              <!-- simple play icon -->
              <svg width="72" height="72" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                <circle cx="12" cy="12" r="11" stroke="rgba(0,0,0,0.55)" stroke-width="1.5" fill="rgba(255,255,255,0.7)"/>
                <path d="M10 8.5v7l5-3.5-5-3.5z" fill="rgba(0,0,0,0.85)"/>
              </svg>
            </div>
          </button>

          <!-- Template with the iframe markup (Shopify external_video_tag). Not rendered until JS inserts it. -->
          <template class="hero-external-template">
            {%- if media.host == 'youtube' -%}
              {{ media | external_video_url: enablejsapi: true, loop: loop, mute: true, autoplay: true | external_video_tag }}
            {%- elsif media.host == 'vimeo' -%}
              {{ media | external_video_url: autopause: true, loop: loop, background: true, muted: true, autoplay: true | external_video_tag }}
            {%- else -%}
              {{ media | external_video_tag }}
            {%- endif -%}
          </template>
        </div>
      {%- endif -%}

      {%- comment -%}
        JS below:
        - Tries to autoplay the native video (muted) after DOMContentLoaded.
        - For external video placeholders, replaces the placeholder with the iframe on click.
      {%- endcomment -%}

      <script>
        (function(){
          // Try to autoplay native hero video (muted). If blocked, poster remains visible.
          function tryAutoplayHeroVideo() {
            var v = document.querySelector('video[data-hero-video]');
            if (!v) return;
            v.muted = true;
            // attempt play after short delay so poster can be painted first
            setTimeout(function(){
              var p = v.play();
              if (p && p.catch) {
                p.catch(function(){ /* autoplay blocked â€” poster remains visible */ });
              }
            }, 200);
          }

          // Lazy-load external video on click of placeholder
          function enableExternalPlaceholders() {
            var placeholders = document.querySelectorAll('.hero-external-placeholder');
            Array.prototype.forEach.call(placeholders, function(btn){
              btn.addEventListener('click', function(e){
                e.preventDefault();
                var wrapper = btn.parentNode;
                var tpl = wrapper.querySelector('.hero-external-template');
                if (!tpl) return;
                var content = tpl.content ? tpl.content.cloneNode(true) : tpl.cloneNode(true);
                // Replace placeholder button with real iframe/markup
                wrapper.innerHTML = '';
                wrapper.appendChild(content);
                // If the inserted iframe tries to autoplay, browsers may allow it if muted/autoplay params used by Shopify
              }, { once: true });
            });
          }

          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', function(){
              tryAutoplayHeroVideo();
              enableExternalPlaceholders();
            });
          } else {
            tryAutoplayHeroVideo();
            enableExternalPlaceholders();
          }
        })();
      </script>

    {% endif %} {# end device_type check #}

  {%- when 'model' -%}
    <model-media
      {% if class %}class="{{ class }}"{% endif %}
      {% if group != blank %}group="{{ group | escape }}"{% endif %}
      handle="{{ product.handle }}"
      style="aspect-ratio: {{ media.preview_image.aspect_ratio }}">
      {{- media | model_viewer_tag: image_size: '2048x', reveal: 'interaction', toggleable: true -}}
    </model-media>

{%- endcase -%}
